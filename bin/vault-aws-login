#!/usr/bin/env python3

import json
from argparse import ArgumentParser
from pathlib import Path

from vault_aws_login import *


def main():
    parser = ArgumentParser()
    parser.add_argument('-p', '--profile', default='default')
    parser.add_argument('-c', '--config', default='~/.vault-aws/config')
    parser.add_argument('-l', '--login', default=None)
    args = parser.parse_args()

    cli_profile = args.profile
    cli_config = Path(args.config).expanduser().absolute()
    cli_login = args.login
    config = gen_config(cli_profile, cli_config, cli_login)
    profile = config[cli_profile]

    vault_addr = profile.get('vault_addr', fallback=None)
    vault_login_kwargs = gen_vault_login_kwargs(profile)
    consul_template_hcl = profile['consul_template_hcl']
    consul_template_flag = gen_consul_template_flag(profile)

    login_data_json = json.dumps(list(gen_login_data(profile, config)))
    extra_ct_flags = json.loads(profile.get('extra_ct_flags', fallback='[]'))
    extra_vl_flags = json.loads(profile.get('extra_vl_flags', fallback='[]'))

    vault_login_if_required(
        vault_addr=vault_addr,
        vault_login_kwargs=vault_login_kwargs,
        extra_vl_flags=extra_vl_flags, )
    return consul_template_exec(
        consul_template_hcl=consul_template_hcl,
        consul_template_flag=consul_template_flag,
        login_data_json=login_data_json,
        extra_ct_flags=extra_ct_flags,
    )


if __name__ == '__main__':
    main()
